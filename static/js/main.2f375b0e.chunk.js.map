{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","total","setTotal","handleClick","e","concat","target","name","clearInputField","removeLastInput","slice","calculate","eval","toString","err","className","type","value","onClick","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"o1BAGA,SAASA,MACP,cAA0BC,oDAAS,IAAnC,6LAAOC,MAAP,cAAcC,SAAd,cAEMC,YAAc,SAACC,GACnBF,SAASD,MAAMI,OAAOD,EAAEE,OAAOC,QAG3BC,gBAAkB,WACtBN,SAAS,KAGLO,gBAAkB,WACtBP,SAASD,MAAMS,MAAM,GAAI,KAIrBC,UAAY,SAAZA,YACJ,IACET,SAASU,KAAKX,OAAOY,YACrB,MAAOC,KACPZ,SAAS,WAIb,OACE,6HAEE,mEAAKa,UAAU,YAAf,UACE,4EACE,oEAAOC,KAAK,OAAOC,MAAOhB,UAG5B,mEAAKc,UAAU,SAAf,UACE,qEAAQA,UAAU,YAAYG,QAASV,gBAAiBW,GAAG,QAA3D,mBAGA,qEAAQJ,UAAU,YAAYG,QAAST,gBAAiBU,GAAG,SAA3D,eAGA,qEAAQJ,UAAU,YAAYG,QAASf,YAAaI,KAAK,IAAzD,kBAGA,qEAAQW,QAASf,YAAaI,KAAK,IAAnC,eAGA,qEAAQW,QAASf,YAAaI,KAAK,IAAnC,eAGA,qEAAQW,QAASf,YAAaI,KAAK,IAAnC,eAGA,qEAAQQ,UAAU,YAAYG,QAASf,YAAaI,KAAK,IAAzD,kBAGA,qEAAQW,QAASf,YAAaI,KAAK,IAAnC,eAGA,qEAAQW,QAASf,YAAaI,KAAK,IAAnC,eAGA,qEAAQW,QAASf,YAAaI,KAAK,IAAnC,eAGA,qEAAQQ,UAAU,YAAYG,QAASf,YAAaI,KAAK,IAAzD,oBAGA,qEAAQW,QAASf,YAAaI,KAAK,IAAnC,eAGA,qEAAQW,QAASf,YAAaI,KAAK,IAAnC,eAGA,qEAAQW,QAASf,YAAaI,KAAK,IAAnC,eAGA,qEAAQQ,UAAU,YAAYG,QAASf,YAAaI,KAAK,IAAzD,eAGA,qEAAQW,QAASf,YAAaI,KAAK,IAAnC,eAGA,qEAAQW,QAASf,YAAaI,KAAK,IAAnC,eAGA,qEAAQQ,UAAU,YAAYG,QAASP,UAAWQ,GAAG,QAArD,uBASKpB,2B,iICpFAqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAChC,EAAA,EAAD,MAEFiC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2f375b0e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [total, setTotal] = useState(\"\");\n\n  const handleClick = (e) => {\n    setTotal(total.concat(e.target.name));\n  };\n\n  const clearInputField = () => {\n    setTotal(\"\");\n  };\n\n  const removeLastInput = () => {\n    setTotal(total.slice(0, -1));\n  };\n\n  /* eslint no-eval: 0 */\n  const calculate = () => {\n    try {\n      setTotal(eval(total).toString());\n    } catch (err) {\n      setTotal(\"Error\");\n    }\n  };\n\n  return (\n    <>\n    {/* <div id='heading'>Simple React Calculator</div> */}\n      <div className=\"container\">\n        <form>\n          <input type=\"text\" value={total} />\n        </form>\n\n        <div className=\"keypad\">\n          <button className=\"highlight\" onClick={clearInputField} id=\"clear\">\n            Clear\n          </button>\n          <button className=\"highlight\" onClick={removeLastInput} id=\"remove\">\n            C\n          </button>\n          <button className=\"highlight\" onClick={handleClick} name=\"/\">\n            &divide;\n          </button>\n          <button onClick={handleClick} name=\"7\">\n            7\n          </button>\n          <button onClick={handleClick} name=\"8\">\n            8\n          </button>\n          <button onClick={handleClick} name=\"9\">\n            9\n          </button>\n          <button className=\"highlight\" onClick={handleClick} name=\"*\">\n            &times;\n          </button>\n          <button onClick={handleClick} name=\"4\">\n            4\n          </button>\n          <button onClick={handleClick} name=\"5\">\n            5\n          </button>\n          <button onClick={handleClick} name=\"6\">\n            6\n          </button>\n          <button className=\"highlight\" onClick={handleClick} name=\"-\">\n            &minus;\n          </button>\n          <button onClick={handleClick} name=\"1\">\n            1\n          </button>\n          <button onClick={handleClick} name=\"2\">\n            2\n          </button>\n          <button onClick={handleClick} name=\"3\">\n            3\n          </button>\n          <button className=\"highlight\" onClick={handleClick} name=\"+\">\n            +\n          </button>\n          <button onClick={handleClick} name=\"0\">\n            0\n          </button>\n          <button onClick={handleClick} name=\".\">\n            .\n          </button>\n          <button className=\"highlight\" onClick={calculate} id=\"total\">\n            =\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}